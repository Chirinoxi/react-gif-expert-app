{"version":3,"sources":["components/AddCategory.jsx","helpers/ApiService.js","hooks/useFetchGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","onClick","getGifs","queryString","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","category","loading","state","setState","useEffect","then","setTimeout","GifGridItem","className","alt","src","GifGrid","GifExpertApp","elem","idx","ReactDOM","render","document","getElementById"],"mappings":"wOA8CeA,EA1CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAuBA,OACE,8BACE,uBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAMd,UACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAnBkB,SAACP,GACzB,IAAIM,EAAQN,EAAEQ,OAAOF,MACrBR,EAAcQ,MAmBV,wBAAQG,QA7BI,SAACT,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAyBZ,2B,+BClCFY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACVC,EADU,iDACsCC,UAAUH,GADhD,6BAFH,oCAEG,SAESI,MAAMF,GAFf,cAERG,EAFQ,gBAGSA,EAASC,OAHlB,uBAGNC,EAHM,EAGNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARxB,kBAWPM,GAXO,4CAAH,sDAcET,ICOAgB,EApBM,SAACC,GACpB,MAA0B/B,mBAAS,CACjCsB,KAAM,GACNU,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRrB,EAAQiB,GAAUK,MAAK,SAACR,GACtBS,YAAW,WACTH,EAAS,CACPZ,KAAMM,EACNI,SAAS,MAEV,UAEJ,CAACD,IAEGE,GCRMK,EAVK,SAAC,GAAuB,EAArBZ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,sBAAKsB,UAAU,6CAAf,UACE,4BAAIZ,IACJ,uBACA,qBAAKa,IAAKb,EAAOc,IAAKxB,QCebyB,EAlBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SACjB,EAAiCD,EAAaC,GAAjCH,EAAb,EAAQN,KAAaU,EAArB,EAAqBA,QACrB,OACE,qCACE,6BAAKD,IACJC,EACC,4CAEA,qBAAKO,UAAU,YAAf,SACGX,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCQnBiB,EAlBM,WACnB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWgB,KAAI,SAACoB,EAAMC,GACrB,OAAO,cAAC,EAAD,CAAoBd,SAAUa,GAAhBA,YCT/BE,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e87a2303.chunk.js","sourcesContent":["import \"./AddCategory.css\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleAdd = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [inputValue, ...categories, ]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    let value = e.target.value;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [inputValue, ...categories, ]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        ></input>\r\n        <button onClick={handleAdd}>Agregar</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","let apiKey = \"CD0Yg6IcgOhfF99znxZQFeeocuH1igEw\";\r\n\r\nconst getGifs = async (queryString) => {\r\n  let url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(queryString)}&limit=10&api_key=${apiKey}`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from \"../helpers/ApiService.js\";\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  // ------------- FORMA #2 -------------\r\n  useEffect(() => {\r\n    getGifs(category).then((images) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: images,\r\n          loading: false,\r\n        });\r\n      }, 1000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state; // { data: [], loading: boolean }\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInDown\">\r\n      <p>{title}</p>\r\n      <hr />\r\n      <img alt={title} src={url} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs.js\";\r\nimport GifGridItem from \"./GifGridItem.jsx\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading ? (\r\n        <p>Cargando...</p>\r\n      ) : (\r\n        <div className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Marvel\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories} />\r\n      <br />\r\n      <ol>\r\n        {categories.map((elem, idx) => {\r\n          return <GifGrid key={elem} category={elem} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './App.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n  <>\n    <GifExpertApp />\n  </>,\n  document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}